from typing import List, Optional
from datetime import date, datetime
from pydantic import BaseModel as BaseSchema       


class usersCreateSchema(BaseSchema):
	id: int
	name: str

class usersUpdateSchema(BaseSchema):
	id: int
	name: str
	class Config:
		orm_mode = True
	pass

class usersGetSchema(BaseSchema):
	id: int
	name: str
	class Config:
		orm_mode = True
	pass

class usersDeleteSchema(BaseSchema):
	id: int
	name: str




class usergroupsCreateSchema(BaseSchema):
	id: int
	user_id: int
	group_id: int

class usergroupsUpdateSchema(BaseSchema):
	id: int
	user_id: int
	group_id: int
	class Config:
		orm_mode = True
	pass

class usergroupsGetSchema(BaseSchema):
	id: int
	user_id: int
	group_id: int
	class Config:
		orm_mode = True
	pass

class usergroupsDeleteSchema(BaseSchema):
	id: int
	user_id: int
	group_id: int




class groupsCreateSchema(BaseSchema):
	id: int
	name: str

class groupsUpdateSchema(BaseSchema):
	id: int
	name: str
	class Config:
		orm_mode = True
	pass

class groupsGetSchema(BaseSchema):
	id: int
	name: str
	class Config:
		orm_mode = True
	pass

class groupsDeleteSchema(BaseSchema):
	id: int
	name: str




class uzivatelCreateSchema(BaseSchema):
	uzivatele_id: int
	jmeno: str
	prijmeni: str
	datum_narozeni: int
	pocet_clanku: int

class uzivatelUpdateSchema(BaseSchema):
	uzivatele_id: int
	jmeno: str
	prijmeni: str
	datum_narozeni: int
	pocet_clanku: int
	class Config:
		orm_mode = True
	pass

class uzivatelGetSchema(BaseSchema):
	uzivatele_id: int
	jmeno: str
	prijmeni: str
	datum_narozeni: int
	pocet_clanku: int
	class Config:
		orm_mode = True
	pass

class uzivatelDeleteSchema(BaseSchema):
	uzivatele_id: int
	jmeno: str
	prijmeni: str
	datum_narozeni: int
	pocet_clanku: int




